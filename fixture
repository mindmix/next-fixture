#!/usr/bin/env python
# -*- coding=utf-8 -*-
# 
# Copyright Â© 2013 Alex Kilgour (alex at kil dot gr)
#
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See the licence.txt file for more details.

from BeautifulSoup import BeautifulSoup
import urllib2
import re
import datetime
import sys

# return the correct suffix for a date
def suffix(d):
    return 'th' if 11<=d<=13 else {1:'st',2:'nd',3:'rd'}.get(d%10, 'th')

# format a given date by adding the suffix
def custom_strftime(format, t):
    return t.strftime(format).replace('{S}', str(t.day) + suffix(t.day))

now = datetime.datetime.now()

if len(sys.argv) < 2 or len(sys.argv) > 3:  # the program name and the one argument (team name) or two (relative time)
	# stop the program and print an error message
	print "Please provide either the name of a team e.g. 'fixture chelsea', or the number of the team e.g. 'fixture 45'"
	print "You can also optionally add relative to show how many days until the match e.g. 'fixture chelsea relative'"
	sys.exit("Type 'fixture list' for a list of team names and numbers")

# grab the argument
arg = sys.argv[1]

# generate the list of possible teams
bbc = urllib2.urlopen('http://www.bbc.co.uk/sport/football/teams')
bbcsoup = BeautifulSoup(bbc)
bbcsoup.prettify()

# pull out all the relevent information.
teamslist = []
allteams = bbcsoup.find('div', 'teams-index')
for item in allteams.findAll('div', 'competition'):
	# get the name of the league. not used atm.
	#title = item.find('h2', 'table-header').contents[0].string
	for lists in item.findAll('ul'):
		for team in lists.findAll('li'):
			name = team.find('a')
			url = str(name['href'])
			url = re.sub('\/', '', url)
			url = re.sub('sport', '', url)
			url = re.sub('football', '', url)
			url = re.sub('teams', '', url)
			teamslist.append(url)
    
# output either the list or the fixture
if arg == 'list':
	for index, item in enumerate(teamslist):
		print str(index) + ')',
		print item
else:
	if arg in teamslist:
		# generate the next game for arg
		bbc = urllib2.urlopen('http://www.bbc.co.uk/sport/football/teams/' + arg)
		bbcsoup = BeautifulSoup(bbc)
		bbcsoup.prettify()
	elif arg.isdigit():
		if int(arg) in range(len(teamslist)):
			# generate the next game for arg
			arg = teamslist[int(arg)]
			bbc = urllib2.urlopen('http://www.bbc.co.uk/sport/football/teams/' + arg)
			bbcsoup = BeautifulSoup(bbc)
			bbcsoup.prettify()
		else:
			sys.exit("We don't recognise that team. Type 'fixture list' for a list of team names and numbers")
	else:
		sys.exit("We don't recognise that team. Type 'fixture list' for a list of team names and numbers")
		
	# pull out all the relevent information.
	table = bbcsoup.find('div', { 'id' : 'next-match' })
	matchtype = table.find('span', 'match-league')
	
	# can include league to show the match tournament e.g. Premier League, Champions League etc...
	league = matchtype.find('a')
	if league:
		league = matchtype.find('a').contents[0].string
	else:
		league = matchtype.contents[0].string
	league = re.sub('^\s+', '', league)
	league = re.sub('\s+$', '', league)
	matchdate = table.find('div', 'component-content').contents[0].string
	matchdate = re.sub('^\s+', '', matchdate)
	matchdate = re.sub('\s+$', '', matchdate)
	fulldate = datetime.datetime.strptime(matchdate, '%a %d %B %Y')
	matchdate = custom_strftime('%a {S} %b', fulldate)

	# find the relative time 'delta.days'
	cdate = now.strftime('%a %d %B %Y')
	cdate = datetime.datetime.strptime(cdate, '%a %d %B %Y')
	delta = fulldate - cdate

	# date comparison to see if it is today. May need to adjust to handle leading 0 issue 
	puredate = re.sub('^[A-z]*', '', matchdate)
	puredate = re.sub('^\s+', '', puredate)
	nowdate = now.strftime('%d %B %Y')
	nowdate = re.sub('^0', '', nowdate)
	if nowdate == puredate:
		matchdate = 'Today '
	else:
		matchdate = matchdate.rstrip('0123456789')
	kickoff = table.find('span', 'match-status').contents[0].string
	kickoff = re.sub('^\s+', '', kickoff)
	kickoff = re.sub('\s+$', '', kickoff)
	
	against = table.find('span', 'match-against')
	team = against.find(attrs={"itemprop" : "name"}).contents[0].string
	team = re.sub('^\s+', '', team)
	team = re.sub('\s+$', '', team)

	location = against.find('a')
	if location:
		location = against.find('a').contents[2].string
		location = re.sub('[()\s]', '', location).lower()
	else:
		location = against.contents[2].string
		location = re.sub('[()\s]', '', location).lower()
	if location == 'home':
		location = '(h)'
	elif location == 'away':
		location = '(a)'
	else:
		location = ''

	# check number of arguments and show correct output
	if (len(sys.argv[1:]) == 2 and sys.argv[2].lower() == 'relative'):
		print team + ' ' + location + ' in ' + str(delta.days) + ' days'
	elif (len(sys.argv[1:]) == 2 and sys.argv[2].lower() == 'both'):
		print matchdate + ' (' + str(delta.days) + ' days), ' + kickoff + ' ' + location + ' vs ' + team
	elif (len(sys.argv[1:]) == 2 and (sys.argv[2].lower() != 'relative' and sys.argv[2].lower() != 'both')):
		sys.exit("your last argument should be 'relative' e.g. 'fixture chelsea relative'")
	else:
		print matchdate + ', ' + kickoff + ' ' + location + ' vs ' + team

	# end
